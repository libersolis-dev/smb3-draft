[{"/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/reportWebVitals.js":"1","/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/pitchers.js":"2","/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/App.js":"3","/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/Table.js":"4","/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/index.js":"5","/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/position.js":"6"},{"size":362,"mtime":1608274262291,"results":"7","hashOfConfig":"8"},{"size":30096,"mtime":1608337528700,"results":"9","hashOfConfig":"8"},{"size":9837,"mtime":1608337325900,"results":"10","hashOfConfig":"8"},{"size":1473,"mtime":1608316691498,"results":"11","hashOfConfig":"8"},{"size":288,"mtime":1608274323091,"results":"12","hashOfConfig":"8"},{"size":89447,"mtime":1608285402279,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"xmu3pr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/reportWebVitals.js",[],["29","30"],"/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/pitchers.js",[],"/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/App.js",["31","32","33","34","35","36"],"import React from 'react';\nimport styled from 'styled-components';\nimport {\n  useTable,\n  useFilters,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from 'react-table';\n// A great library for fuzzy filtering/sorting items\nimport { matchSorter } from 'match-sorter';\n\nimport pitchers from './pitchers';\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || ''}\n        onChange={(e) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  );\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}>\n      <option value=''>All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <input\n        type='range'\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}>\n      <input\n        value={filterValue[0] || ''}\n        type='number'\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1],\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: '70px',\n          marginRight: '0.5rem',\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || ''}\n        type='number'\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined,\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: '70px',\n          marginLeft: '0.5rem',\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Our table component\nfunction Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    [],\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    [],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters, // useFilters!\n    useGlobalFilter, // useGlobalFilter!\n  );\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 300);\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n    </>\n  );\n}\n\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\nfilterGreaterThan.autoRemove = (val) => typeof val !== 'number';\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Pitchers',\n        columns: [\n          {\n            Header: 'Name',\n            accessor: 'name',\n            filter: 'fuzzyText',\n          },\n          {\n            Header: 'Position',\n            accessor: 'position',\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n          },\n          {\n            Header: 'Rating',\n            accessor: 'rating',\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n          },\n          {\n            Header: 'Velocity',\n            accessor: 'vel',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between',\n          },\n          {\n            Header: 'Junk',\n            accessor: 'jnk',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between',\n          },\n          {\n            Header: 'Accuracy',\n            accessor: 'acc',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between',\n          },\n          {\n            Header: 'Arsenal',\n            accessor: 'arsenal',\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n          },\n          {\n            Header: 'Fielding',\n            accessor: 'fld',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between',\n          },\n          {\n            Header: 'Throws',\n            accessor: 'throw',\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n          },\n          {\n            Header: 'Salary',\n            accessor: 'salary',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between',\n          },\n          {\n            Header: 'Team',\n            accessor: 'team',\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n          },\n        ],\n      },\n    ],\n    [],\n  );\n\n  const data = React.useMemo(() => pitchers, []);\n\n  return (\n    <Styles>\n      <Table columns={columns} data={data} />\n    </Styles>\n  );\n}\n\nexport default App;\n","/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/Table.js",[],"/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/index.js",[],"/Users/mannyhagman/opt/workspaces/gitrepos/client/smb3-draft/src/position.js",[],["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":44,"column":10,"nodeType":"45","messageId":"46","endLine":44,"endColumn":22},{"ruleId":"43","severity":1,"message":"47","line":126,"column":10,"nodeType":"45","messageId":"46","endLine":126,"endColumn":28},{"ruleId":"43","severity":1,"message":"48","line":258,"column":5,"nodeType":"45","messageId":"46","endLine":258,"endColumn":10},{"ruleId":"43","severity":1,"message":"49","line":259,"column":5,"nodeType":"45","messageId":"46","endLine":259,"endColumn":19},{"ruleId":"43","severity":1,"message":"50","line":260,"column":5,"nodeType":"45","messageId":"46","endLine":260,"endColumn":26},{"ruleId":"43","severity":1,"message":"51","line":261,"column":5,"nodeType":"45","messageId":"46","endLine":261,"endColumn":20},{"ruleId":"39","replacedBy":"52"},{"ruleId":"41","replacedBy":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'GlobalFilter' is defined but never used.","Identifier","unusedVar","'SliderColumnFilter' is defined but never used.","'state' is assigned a value but never used.","'visibleColumns' is assigned a value but never used.","'preGlobalFilteredRows' is assigned a value but never used.","'setGlobalFilter' is assigned a value but never used.",["54"],["55"],"no-global-assign","no-unsafe-negation"]